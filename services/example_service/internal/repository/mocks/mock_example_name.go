// Code generated by MockGen. DO NOT EDIT.
// Source: /home/robi/ngoding/pribadi/go-boilgen/services/example_service/domain/repository/example_name.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Muruyung/go-boilgen/services/example_service/domain/entity"
	goutils "github.com/Muruyung/go-utilities"
	gomock "github.com/golang/mock/gomock"
)

// MockExampleNameRepository is a mock of ExampleNameRepository interface.
type MockExampleNameRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExampleNameRepositoryMockRecorder
}

// MockExampleNameRepositoryMockRecorder is the mock recorder for MockExampleNameRepository.
type MockExampleNameRepositoryMockRecorder struct {
	mock *MockExampleNameRepository
}

// NewMockExampleNameRepository creates a new mock instance.
func NewMockExampleNameRepository(ctrl *gomock.Controller) *MockExampleNameRepository {
	mock := &MockExampleNameRepository{ctrl: ctrl}
	mock.recorder = &MockExampleNameRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleNameRepository) EXPECT() *MockExampleNameRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockExampleNameRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExampleNameRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExampleNameRepository)(nil).Delete), ctx, id)
}

// ExampleCustomMethod mocks base method.
func (m *MockExampleNameRepository) ExampleCustomMethod(ctx context.Context, query goutils.QueryBuilderInteractor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExampleCustomMethod", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExampleCustomMethod indicates an expected call of ExampleCustomMethod.
func (mr *MockExampleNameRepositoryMockRecorder) ExampleCustomMethod(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExampleCustomMethod", reflect.TypeOf((*MockExampleNameRepository)(nil).ExampleCustomMethod), ctx, query)
}

// ExampleCustomMethodDefault mocks base method.
func (m *MockExampleNameRepository) ExampleCustomMethodDefault(ctx context.Context, query goutils.QueryBuilderInteractor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExampleCustomMethodDefault", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExampleCustomMethodDefault indicates an expected call of ExampleCustomMethodDefault.
func (mr *MockExampleNameRepositoryMockRecorder) ExampleCustomMethodDefault(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExampleCustomMethodDefault", reflect.TypeOf((*MockExampleNameRepository)(nil).ExampleCustomMethodDefault), ctx, query)
}

// Get mocks base method.
func (m *MockExampleNameRepository) Get(ctx context.Context, query goutils.QueryBuilderInteractor) (*entity.ExampleName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, query)
	ret0, _ := ret[0].(*entity.ExampleName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExampleNameRepositoryMockRecorder) Get(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExampleNameRepository)(nil).Get), ctx, query)
}

// GetCount mocks base method.
func (m *MockExampleNameRepository) GetCount(ctx context.Context, query goutils.QueryBuilderInteractor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockExampleNameRepositoryMockRecorder) GetCount(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockExampleNameRepository)(nil).GetCount), ctx, query)
}

// GetList mocks base method.
func (m *MockExampleNameRepository) GetList(ctx context.Context, query goutils.QueryBuilderInteractor) ([]*entity.ExampleName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, query)
	ret0, _ := ret[0].([]*entity.ExampleName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockExampleNameRepositoryMockRecorder) GetList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockExampleNameRepository)(nil).GetList), ctx, query)
}

// Save mocks base method.
func (m *MockExampleNameRepository) Save(ctx context.Context, data *entity.ExampleName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockExampleNameRepositoryMockRecorder) Save(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockExampleNameRepository)(nil).Save), ctx, data)
}

// Update mocks base method.
func (m *MockExampleNameRepository) Update(ctx context.Context, id int, data *entity.ExampleName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExampleNameRepositoryMockRecorder) Update(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExampleNameRepository)(nil).Update), ctx, id, data)
}
