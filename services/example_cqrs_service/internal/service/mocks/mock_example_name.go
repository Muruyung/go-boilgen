// Code generated by MockGen. DO NOT EDIT.
// Source: /home/robi/ngoding/pribadi/go-boilgen/services/example_cqrs_service/domain/usecase/query/example_name.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Muruyung/go-boilgen/services/example_cqrs_service/domain/entity"
	goutils "github.com/Muruyung/go-utilities"
	gomock "github.com/golang/mock/gomock"
)

// MockExampleNameUseCase is a mock of ExampleNameUseCase interface.
type MockExampleNameUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockExampleNameUseCaseMockRecorder
}

// MockExampleNameUseCaseMockRecorder is the mock recorder for MockExampleNameUseCase.
type MockExampleNameUseCaseMockRecorder struct {
	mock *MockExampleNameUseCase
}

// NewMockExampleNameUseCase creates a new mock instance.
func NewMockExampleNameUseCase(ctrl *gomock.Controller) *MockExampleNameUseCase {
	mock := &MockExampleNameUseCase{ctrl: ctrl}
	mock.recorder = &MockExampleNameUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleNameUseCase) EXPECT() *MockExampleNameUseCaseMockRecorder {
	return m.recorder
}

// ExampleCustomQueryMethod mocks base method.
func (m *MockExampleNameUseCase) ExampleCustomQueryMethod(ctx context.Context, exampleParam string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExampleCustomQueryMethod", ctx, exampleParam)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExampleCustomQueryMethod indicates an expected call of ExampleCustomQueryMethod.
func (mr *MockExampleNameUseCaseMockRecorder) ExampleCustomQueryMethod(ctx, exampleParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExampleCustomQueryMethod", reflect.TypeOf((*MockExampleNameUseCase)(nil).ExampleCustomQueryMethod), ctx, exampleParam)
}

// GetExampleNameByID mocks base method.
func (m *MockExampleNameUseCase) GetExampleNameByID(ctx context.Context, id int) (*entity.ExampleName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExampleNameByID", ctx, id)
	ret0, _ := ret[0].(*entity.ExampleName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExampleNameByID indicates an expected call of GetExampleNameByID.
func (mr *MockExampleNameUseCaseMockRecorder) GetExampleNameByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExampleNameByID", reflect.TypeOf((*MockExampleNameUseCase)(nil).GetExampleNameByID), ctx, id)
}

// GetListExampleName mocks base method.
func (m *MockExampleNameUseCase) GetListExampleName(ctx context.Context, request *goutils.RequestOption) ([]*entity.ExampleName, *goutils.MetaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListExampleName", ctx, request)
	ret0, _ := ret[0].([]*entity.ExampleName)
	ret1, _ := ret[1].(*goutils.MetaResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListExampleName indicates an expected call of GetListExampleName.
func (mr *MockExampleNameUseCaseMockRecorder) GetListExampleName(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListExampleName", reflect.TypeOf((*MockExampleNameUseCase)(nil).GetListExampleName), ctx, request)
}
